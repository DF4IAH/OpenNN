set(libSrcs 
	ant_colony_optimization.cpp
	association_rules.cpp
	bounding_layer.cpp
	character_string.cpp
	conditions_layer.cpp
	conjugate_gradient.cpp
	correlation_analysis.cpp
	cross_entropy_error.cpp
	data_set.cpp
	error_term.cpp
	evolutionary_algorithm.cpp
	f1_score_optimization_threshold.cpp
	file_utilities.cpp
	genetic_algorithm.cpp
	golden_section_order.cpp
	gradient_descent.cpp
	growing_inputs.cpp
	incremental_order.cpp
	independent_parameters.cpp
	inputs.cpp
	inputs_selection_algorithm.cpp
	inputs_trending_layer.cpp
	instances.cpp
	k_nearest_neighbors.cpp
	kappa_coefficient_optimization_threshold.cpp
	levenberg_marquardt_algorithm.cpp
	loss_index.cpp
	mathematical_model.cpp
	matthew_correlation_optimization_threshold.cpp
	mean_squared_error.cpp
	minkowski_error.cpp
	missing_values.cpp
	model_selection.cpp
	multilayer_perceptron.cpp
	neural_network.cpp
	neural_parameters_norm.cpp
	newton_method.cpp
	normalized_squared_error.cpp
	numerical_differentiation.cpp
	numerical_integration.cpp
	order_selection_algorithm.cpp
	ordinary_differential_equations.cpp
	outputs.cpp
	outputs_integrals.cpp
	outputs_trending_layer.cpp
	perceptron.cpp
	perceptron_layer.cpp
	plug_in.cpp
	principal_components_layer.cpp
	probabilistic_layer.cpp
	pruning_inputs.cpp
	quasi_newton_method.cpp
	random_search.cpp
	regularization_term.cpp
	roc_area_error.cpp
	roc_curve_optimization_threshold.cpp
	root_mean_squared_error.cpp
	scaling_layer.cpp
	selective_pruning.cpp
	simulated_annealing_order.cpp
	sum_squared_error.cpp
	testing_analysis.cpp
	text_analytics.cpp
	threshold_selection_algorithm.cpp
	tinyxml2.cpp
	training_algorithm.cpp
	training_rate_algorithm.cpp
	training_strategy.cpp
	trending_layer.cpp
	unscaling_layer.cpp
	variables.cpp
	weighted_squared_error.cpp
	weighted_squared_regression_error.cpp
	youden_index_optimization_threshold.cpp
)
 
add_library(libOpenNN ${libSrcs})
 
#install(TARGETS libOpenNN DESTINATION lib)
